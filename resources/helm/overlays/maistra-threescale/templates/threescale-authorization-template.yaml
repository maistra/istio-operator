# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/authorization/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/authorization/template.yaml -n authorization
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: threescale-authorization
  namespace: {{ .Release.Namespace }}
  labels:
    app: 3scale-istio-adapter
    chart: {{ template "threescale.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  descriptor: ""
---
