global:
  # ImagePullSecrets for control plane ServiceAccount, list of secrets in the same namespace
  # to use for pulling any images in pods that reference this ServiceAccount.
  # Must be set for any cluster configured with private docker registry.
  imagePullSecrets: []

  oauthproxy:
    image: registry.redhat.io/openshift4/ose-oauth-proxy:latest

  proxy:
    image: proxyv2

  multiCluster:
    # Should be set to the name of the cluster this installation will run in. This is required for sidecar injection
    # to properly label proxies
    clusterName: ""

  # Configure the certificate provider for control plane communication.
  # Currently, two providers are supported: "kubernetes" and "istiod".
  # As some platforms may not have kubernetes signing APIs,
  # Istiod is the default
  pilotCertProvider: istiod

  sds:
    # The JWT token for SDS and the aud field of such JWT. See RFC 7519, section 4.1.3.
    # When a CSR is sent from Istio Agent to the CA (e.g. Istiod), this aud is to make sure the
    # JWT is intended for the CA.
    token:
      aud: istio-ca

  # Configure the policy for validating JWT.
  # Currently, two options are supported: "third-party-jwt" and "first-party-jwt".
  jwtPolicy: "third-party-jwt"

  # A minimal set of requested resources to applied to all deployments so that
  # Horizontal Pod Autoscaler will be able to function (if set).
  # Each component can overwrite these default values by adding its own resources
  # block in the relevant section below and setting the desired resources values.
  defaultResources:
    requests:
      cpu: 10m
    #   memory: 128Mi
    # limits:
    #   cpu: 100m
    #   memory: 128Mi

meshConfig:
  enablePrometheusMerge: false
  defaultConfig:
    proxyMetadata: {}

prometheus:
  enabled: true
  ingress:
    hosts: [""]
    annotations: {}
    enabled: false
  replicaCount: 1
  hub: docker.io/prom
  image: prometheus
  tag: v2.21.0
  retention: 6h

  # Controls the frequency of prometheus scraping
  scrapeInterval: 15s

  contextPath: /prometheus

  # 1.2 it is disabled by default - it can be enabled for special cases, but would create port
  # conflicts. In general it is not recommended to use node ports for services, but use gateways instead.
#  service:
#    annotations: {}
#    nodePort:
#      enabled: false
#      port: 32090

  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  service: {}
  resources: {}
  datasources: []
  # Specify the pod anti-affinity that allows you to constrain which nodes
  # your pod is eligible to be scheduled based on labels on pods that are
  # already running on the node rather than based on labels on nodes.
  # There are currently two types of anti-affinity:
  #    "requiredDuringSchedulingIgnoredDuringExecution"
  #    "preferredDuringSchedulingIgnoredDuringExecution"
  # which denote "hard" vs. "soft" requirements, you can define your values
  # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
  # correspondingly.
  # For example:
  # podAntiAffinityLabelSelector:
  # - key: security
  #   operator: In
  #   values: S1,S2
  #   topologyKey: "kubernetes.io/hostname"
  # This pod anti-affinity rule says that the pod requires not to be scheduled
  # onto a node if that node is already running a pod with label having key
  # "security" and value "S1".
  podAntiAffinityLabelSelector: []
  podAntiAffinityTermLabelSelector: []

  # Configure whether provisions a certificate to Prometheus through Istio Agent.
  # When this option is set as true, a sidecar is deployed along Prometheus to
  # provision a certificate through Istio Agent to Prometheus. The provisioned certificate
  # is shared with Prometheus through mounted files.
  # When this option is set as false, this certificate provisioning mechanism is disabled.
  provisionPrometheusCert: true

  configReloader: 
    image: quay.io/prometheus-operator/prometheus-config-reloader:v0.63.0
    resources: {}

  scrapingNamespaces: []

revision: ""