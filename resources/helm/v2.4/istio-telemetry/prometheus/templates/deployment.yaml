# TODO: the original template has service account, roles, etc
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    maistra-version: "2.4.6"
    app: prometheus
    release: {{ .Release.Name }}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  replicas: {{ .Values.prometheus.replicaCount }}
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        maistra-control-plane: {{ .Release.Namespace }}
        app: prometheus
        release: {{ .Release.Name }}
      annotations:
        sidecar.istio.io/inject: "false"
        {{- if .Values.prometheus.podAnnotations }}
{{ toYaml .Values.prometheus.podAnnotations | indent 8 }}
        {{- end }}
    spec:
{{- if .Values.global.priorityClassName }}
      priorityClassName: "{{ .Values.global.priorityClassName }}"
{{- end }}
      serviceAccountName: prometheus
      initContainers:
        - name: init-config-reloader
{{- if contains "/" .Values.prometheusConfigReloader.image }}
          image: "{{ .Values.prometheusConfigReloader.image }}"
{{- else }}
          image: "{{ .Values.global.hub }}/{{ .Values.prometheusConfigReloader.image }}:{{ .Values.global.tag }}"
{{- end }}
{{- if .Values.global.imagePullPolicy }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
{{- end }}
          args:
            - '--watch-interval=0'
            - '--reload-url=http://localhost:9090/-/reload'
            - '--config-file=/etc/prometheus/config/prometheus.yml'
          command:
            - /bin/prometheus-config-reloader
          resources:
{{- if .Values.prometheusConfigReloader.resources }}
{{ toYaml .Values.prometheusConfigReloader.resources | indent 12 }}
{{- else }}
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
{{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus/config    
      containers:
          # OAuth proxy
        - name: prometheus-proxy
{{- if contains "/" .Values.global.oauthproxy.image }}
          image: {{ .Values.global.oauthproxy.image }}
{{- else }}
          image: {{ .Values.global.oauthproxy.hub }}/{{ .Values.global.oauthproxy.image }}:{{ .Values.global.oauthproxy.tag }}
{{- end }}
          imagePullPolicy: {{ .Values.global.oauthproxy.imagePullPolicy }}
          ports:
          - containerPort: 3001
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /oauth/healthz
              port: https
              scheme: HTTPS
            timeoutSeconds: 1
          resources:
{{- if .Values.global.oauthproxy.resources }}
{{ toYaml .Values.global.oauthproxy.resources | indent 12 }}
{{- else }}
{{ toYaml .Values.global.defaultResources | indent 12 }}
{{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/tls/private
            name: secret-prometheus-tls
          - mountPath: /etc/proxy/htpasswd
            name: secret-htpasswd
          - mountPath: /etc/proxy/secrets
            name: secret-prometheus-proxy
          - mountPath: /etc/pki/ca-trust/extracted/pem/
            name: trusted-ca-bundle
            readOnly: true
          args:
          - -provider=openshift
          - -https-address=:3001
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -htpasswd-file=/etc/proxy/htpasswd/auth
          - -display-htpasswd-form=false
          - '-openshift-sar={"namespace": "{{ .Release.Namespace }}", "resource": "pods", "verb": "get"}'
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -openshift-service-account=prometheus
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - name: prometheus
{{- if contains "/" .Values.prometheus.image }}
          image: "{{ .Values.prometheus.image }}"
{{- else }}
          image: "{{ .Values.global.hub }}/{{ .Values.prometheus.image }}:{{ .Values.global.tag }}"
{{- end }}
{{- if .Values.global.imagePullPolicy }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
{{- end }}
          args:
            - '--storage.tsdb.retention.time={{ .Values.prometheus.retention }}'
            - '--storage.tsdb.path=/prometheus'
            - '--config.file=/etc/prometheus/config/prometheus.yml'
            - '--web.enable-lifecycle'
          ports:
            - containerPort: 9090
              name: web
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            timeoutSeconds: 3
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            timeoutSeconds: 3
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 60
          resources:
{{- if .Values.prometheus.resources }}
{{ toYaml .Values.prometheus.resources | indent 12 }}
{{- else }}
{{ toYaml .Values.global.defaultResources | indent 12 }}
{{- end }}
          volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus/config
          - name: prometheus-db-volume
            mountPath: /prometheus
          {{- if and .Values.prometheus.provisionPrometheusCert (not .Values.meshConfig.enablePrometheusMerge) }}
          - mountPath: /etc/istio-certs
            name: istio-certs
          {{- end }}
        - name: config-reloader
{{- if contains "/" .Values.prometheusConfigReloader.image }}
          image: "{{ .Values.prometheusConfigReloader.image }}"
{{- else }}
          image: "{{ .Values.global.hub }}/{{ .Values.prometheusConfigReloader.image }}:{{ .Values.global.tag }}"
{{- end }}
{{- if .Values.global.imagePullPolicy }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
{{- end }}
          args:
            - "--watch-interval={{ .Values.prometheus.configReloadInterval }}"
            - '--reload-url=http://localhost:9090/-/reload'
            - '--config-file=/etc/prometheus/config/prometheus.yml'
          command:
          - /bin/prometheus-config-reloader
          resources:
{{- if .Values.prometheusConfigReloader.resources }}
{{ toYaml .Values.prometheusConfigReloader.resources | indent 12 }}
{{- else }}
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
{{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus/config
{{- if and .Values.prometheus.provisionPrometheusCert (not .Values.meshConfig.enablePrometheusMerge) }}
        - name: istio-proxy
{{- if contains "/" .Values.global.proxy.image }}
          image: "{{ .Values.global.proxy.image }}"
{{- else }}
          image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image | default "proxyv2" }}:{{ .Values.global.tag }}"
{{- end }}
          ports:
            - containerPort: 15090
              protocol: TCP
              name: http-envoy-prom
          args:
            - proxy
            - sidecar
            - --domain
            - $(POD_NAMESPACE).svc.{{ .Values.global.proxy.clusterDomain }}
            - "istio-proxy-prometheus"
            {{- if .Values.global.proxy.logLevel }}
            - --proxyLogLevel={{ .Values.global.proxy.logLevel }}
            {{- end}}
            {{- if .Values.global.proxy.componentLogLevel }}
            - --proxyComponentLogLevel={{ .Values.global.proxy.componentLogLevel }}
            {{- end}}
            - --controlPlaneAuthPolicy
            - NONE
              {{- if .Values.global.trustDomain }}
            - --trust-domain={{ .Values.global.trustDomain }}
              {{- end }}
              {{- if .Values.global.logAsJson }}
            - --log_as_json
              {{- end }}
          env:
            - name: OUTPUT_CERTS
              value: "/etc/istio-certs"
            - name: JWT_POLICY
              value: {{ .Values.global.jwtPolicy }}
            - name: PILOT_CERT_PROVIDER
              value: {{ .Values.global.pilotCertProvider }}
            # Temp, pending PR to make it default or based on the istiodAddr env
            - name: CA_ADDR
              {{- if .Values.global.caAddress }}
              value: {{ .Values.global.caAddress }}
              {{- else }}
              value: istiod-{{ .Values.revision | default "default" }}.{{ .Release.Namespace }}.svc:15012
              {{- end }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: INSTANCE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
              {{- if .Values.global.network }}
            - name: ISTIO_META_NETWORK
              value: "{{ .Values.global.network }}"
              {{- end }}
              {{- if .Values.global.meshID }}
            - name: ISTIO_META_MESH_ID
              value: "{{ .Values.global.meshID }}"
              {{- else if .Values.global.trustDomain }}
            - name: ISTIO_META_MESH_ID
              value: "{{ .Values.global.trustDomain }}"
              {{- end }}
            - name: ISTIO_META_CLUSTER_ID
              value: "{{ .Values.global.multiCluster.clusterName | default `Kubernetes` }}"
            {{- range $key, $value := .Values.meshConfig.defaultConfig.proxyMetadata }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "Always" }}
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15020
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
            resources:
{{- if .Values.global.proxy.resources }}
{{ toYaml .Values.global.proxy.resources | indent 12 }}
{{- else }}
{{ toYaml .Values.global.defaultResources | indent 12 }}
{{- end }}
          volumeMounts:
              {{- if eq .Values.global.pilotCertProvider "istiod" }}
            - mountPath: /var/run/secrets/istio
              name: istiod-ca-cert
              {{- end }}
            - mountPath: /etc/istio/proxy
              name: istio-envoy
              {{- if eq .Values.global.jwtPolicy "third-party-jwt" }}
            - mountPath: /var/run/secrets/tokens
              name: istio-token
              {{- end }}
            - mountPath: /etc/istio-certs/
              name: istio-certs
            - name: istio-config-volume
              mountPath: /etc/istio/config
{{- end }}

      volumes:
      # OAuth proxy
      - name: secret-prometheus-tls
        secret:
          defaultMode: 420
          secretName: prometheus-tls
      - name: secret-htpasswd
        secret:
          items:
            - key: auth
              path: auth
          defaultMode: 420
          secretName: htpasswd
      - name: secret-prometheus-proxy
        secret:
          defaultMode: 420
          secretName: prometheus-proxy
      - name: trusted-ca-bundle
        configMap:
          defaultMode: 420
          items:
            - key: ca-bundle.crt
              path: tls-ca-bundle.pem
          name: trusted-ca-bundle
          optional: true
      - name: istio-config-volume
        configMap:
          name: istio-{{ .Values.revision | default "default" }}
          optional: true
      - name: config-volume
        configMap:
          name: prometheus
      - name: prometheus-db-volume
        emptyDir: {}    

{{- if and .Values.prometheus.provisionPrometheusCert (not .Values.meshConfig.enablePrometheusMerge) }}
      - name: istio-certs
        emptyDir:
          medium: Memory
{{- end }}

{{- if and .Values.prometheus.provisionPrometheusCert (not .Values.meshConfig.enablePrometheusMerge) }}
      - emptyDir:
          medium: Memory
        name: istio-envoy
        {{- if eq .Values.global.jwtPolicy "third-party-jwt" }}
      - name: istio-token
        projected:
          defaultMode: 420
          sources:
            - serviceAccountToken:
                path: istio-token
                expirationSeconds: 43200
                audience: {{ .Values.global.sds.token.aud }}
        {{- end }}
        {{- if eq .Values.global.pilotCertProvider "istiod" }}
      - name: istiod-ca-cert
        configMap:
          defaultMode: 420
          name: {{ .Values.global.caCertConfigMapName }}
        {{- end }}
{{- end }}

      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      {{- include "podAntiAffinity" . | indent 6 }}
{{- if .Values.prometheus.tolerations }}
      tolerations:
{{ toYaml .Values.prometheus.tolerations | indent 6 }}
{{- else if .Values.global.defaultTolerations }}
      tolerations:
{{ toYaml .Values.global.defaultTolerations | indent 6 }}
{{- end }}
